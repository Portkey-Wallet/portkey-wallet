@startuml wallet

class Portkey {
    static private wallet: NativePortkeyWallet
    static getWallet: () => NativePortkeyWallet
    static login: (callback:MethodCallback<CallResult>) => void
    static logout: (callback:MethodCallback<CallResult>) => void
}

note left of Portkey::getWallet
    return wallet
end note
note left of Portkey::login
    if (loginSuccess) {
        wallet = new NativePortkeyWallet()
    }
end note
note left of Portkey::logout
    if (logoutSuccess) {
        wallet.invaliate()
        wallet = null
    }
end note

class NativePortkeyWallet {
    isUnlocked: () => boolean
    lock: (callback:MethodCallback<boolean>) => void
    unlock: (callback:MethodCallback<boolean>) => void
    exitWallet: (callback:MethodCallback<boolean>) => void

    guardianModule: GuardianModule
    contractModule: ContractModule
}

class LoginModule {
    {static} login: (callback:MethodCallback<CallResult>) => void
    {static} logout: (callback:MethodCallback<CallResult>) => void
    {static} loginStatus: () => LoginStatus
}

class GuardianModule {
    guardianCount: (callback:MethodCallback<number>) => void
    openGuardianList: (callback:MethodCallback<CallResult>) => void
    openAddGuardian: (callback:MethodCallback<CallResult>) => void
}

class ConfigModule {
    {static} getNetworkList: (void) => NetworkConfig[]
    {static} addNetwork: (config: NetworkConfig) => boolean
    {static} removeNetwork: (config: NetworkConfig) => boolean
    {static} switchNetwork: (config: NetworkConfig) => boolean
    
    {static} setTermsOfService: (prefix: string, title: string) => void
    
    {static} clearAllData: () => boolean
}

interface NetworkConfig {
    name: string;
    walletType: 'ethereum' | 'aelf';
    networkType: 'MAIN' | 'TESTNET';
    apiUrl: string;
    graphqlUrl: string;
    networkIconUrl?: string;
}

class ThemeModule {
    {static} setTheme: (theme: Theme) => void
    {static} setAppName: (appName: string) => void
    {static} setNavigationTheme: (navigationTheme: NavigationTheme) => void
}

interface Theme {
    themeColor: string
    themeFont: string
}

interface NavigationTheme {
    tintColor: string
    backImage: string
    titleColor: string
    titleFont: string
}

class ContractModule {
    callCaMethod: (params:CaContractConfig,callback:MethodCallback<CallResult>) => void
    callContractMethod: (params:GeneralContractConfi,callback:MethodCallback<CallResult>) => void
}

interface MethodCallback<T> {
    (error?: Error, result?: T): void;
}

interface CaContractConfig {
    methodName: string
    params: any
    isViewMethod: boolean
}

interface GeneralContractConfig extends CaContractConfig {
    contractAddress?: string
    contractName?: string
}

interface CallResult<T> {
    status: 'success' | 'fail' | 'pending'
    data: T
    errorMsg: string
}

' MethodCallback --> NativePortkeyWallet
' MethodCallback --> GuardianManager
' CaContractConfig --> NativePortkeyWallet
' AddGuardianConfig --> GuardianManager
' AddGuardianResult --> GuardianManager
Portkey *--> NativePortkeyWallet
Portkey *--> LoginModule
NativePortkeyWallet *--> GuardianModule
NativePortkeyWallet *--> ContractModule

CallResult --> LoginModule
CallResult --> GuardianModule
NetworkConfig --> ConfigModule
Theme --> ThemeModule
NavigationTheme --> ThemeModule
CaContractConfig --> ContractModule

@enduml
